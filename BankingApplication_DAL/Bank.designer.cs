#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BankingApplication_DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Bank")]
	public partial class BankDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccountTable(AccountTable instance);
    partial void UpdateAccountTable(AccountTable instance);
    partial void DeleteAccountTable(AccountTable instance);
    partial void InsertCustomer_Accounts_Table(Customer_Accounts_Table instance);
    partial void UpdateCustomer_Accounts_Table(Customer_Accounts_Table instance);
    partial void DeleteCustomer_Accounts_Table(Customer_Accounts_Table instance);
    partial void InsertCustomerTable(CustomerTable instance);
    partial void UpdateCustomerTable(CustomerTable instance);
    partial void DeleteCustomerTable(CustomerTable instance);
    partial void InsertTransactionTable(TransactionTable instance);
    partial void UpdateTransactionTable(TransactionTable instance);
    partial void DeleteTransactionTable(TransactionTable instance);
    #endregion
		
		public BankDataContext() : 
				base(global::BankingApplication_DAL.Properties.Settings.Default.BankConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BankDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BankDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BankDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BankDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AccountTable> AccountTables
		{
			get
			{
				return this.GetTable<AccountTable>();
			}
		}
		
		public System.Data.Linq.Table<Customer_Accounts_Table> Customer_Accounts_Tables
		{
			get
			{
				return this.GetTable<Customer_Accounts_Table>();
			}
		}
		
		public System.Data.Linq.Table<CustomerTable> CustomerTables
		{
			get
			{
				return this.GetTable<CustomerTable>();
			}
		}
		
		public System.Data.Linq.Table<TransactionTable> TransactionTables
		{
			get
			{
				return this.GetTable<TransactionTable>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountTable")]
	public partial class AccountTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Account_ID;
		
		private string _Account_Type;
		
		private EntitySet<Customer_Accounts_Table> _Customer_Accounts_Tables;
		
		private EntitySet<TransactionTable> _TransactionTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccount_IDChanging(int value);
    partial void OnAccount_IDChanged();
    partial void OnAccount_TypeChanging(string value);
    partial void OnAccount_TypeChanged();
    #endregion
		
		public AccountTable()
		{
			this._Customer_Accounts_Tables = new EntitySet<Customer_Accounts_Table>(new Action<Customer_Accounts_Table>(this.attach_Customer_Accounts_Tables), new Action<Customer_Accounts_Table>(this.detach_Customer_Accounts_Tables));
			this._TransactionTables = new EntitySet<TransactionTable>(new Action<TransactionTable>(this.attach_TransactionTables), new Action<TransactionTable>(this.detach_TransactionTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Account_ID
		{
			get
			{
				return this._Account_ID;
			}
			set
			{
				if ((this._Account_ID != value))
				{
					this.OnAccount_IDChanging(value);
					this.SendPropertyChanging();
					this._Account_ID = value;
					this.SendPropertyChanged("Account_ID");
					this.OnAccount_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Type", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string Account_Type
		{
			get
			{
				return this._Account_Type;
			}
			set
			{
				if ((this._Account_Type != value))
				{
					this.OnAccount_TypeChanging(value);
					this.SendPropertyChanging();
					this._Account_Type = value;
					this.SendPropertyChanged("Account_Type");
					this.OnAccount_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountTable_Customer_Accounts_Table", Storage="_Customer_Accounts_Tables", ThisKey="Account_ID", OtherKey="Account_ID")]
		public EntitySet<Customer_Accounts_Table> Customer_Accounts_Tables
		{
			get
			{
				return this._Customer_Accounts_Tables;
			}
			set
			{
				this._Customer_Accounts_Tables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountTable_TransactionTable", Storage="_TransactionTables", ThisKey="Account_ID", OtherKey="Account_ID")]
		public EntitySet<TransactionTable> TransactionTables
		{
			get
			{
				return this._TransactionTables;
			}
			set
			{
				this._TransactionTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customer_Accounts_Tables(Customer_Accounts_Table entity)
		{
			this.SendPropertyChanging();
			entity.AccountTable = this;
		}
		
		private void detach_Customer_Accounts_Tables(Customer_Accounts_Table entity)
		{
			this.SendPropertyChanging();
			entity.AccountTable = null;
		}
		
		private void attach_TransactionTables(TransactionTable entity)
		{
			this.SendPropertyChanging();
			entity.AccountTable = this;
		}
		
		private void detach_TransactionTables(TransactionTable entity)
		{
			this.SendPropertyChanging();
			entity.AccountTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer_Accounts_Table")]
	public partial class Customer_Accounts_Table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Customer_ID;
		
		private int _Account_ID;
		
		private decimal _Balance;
		
		private EntityRef<AccountTable> _AccountTable;
		
		private EntityRef<CustomerTable> _CustomerTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomer_IDChanging(int value);
    partial void OnCustomer_IDChanged();
    partial void OnAccount_IDChanging(int value);
    partial void OnAccount_IDChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    #endregion
		
		public Customer_Accounts_Table()
		{
			this._AccountTable = default(EntityRef<AccountTable>);
			this._CustomerTable = default(EntityRef<CustomerTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Customer_ID
		{
			get
			{
				return this._Customer_ID;
			}
			set
			{
				if ((this._Customer_ID != value))
				{
					if (this._CustomerTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomer_IDChanging(value);
					this.SendPropertyChanging();
					this._Customer_ID = value;
					this.SendPropertyChanged("Customer_ID");
					this.OnCustomer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Account_ID
		{
			get
			{
				return this._Account_ID;
			}
			set
			{
				if ((this._Account_ID != value))
				{
					if (this._AccountTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccount_IDChanging(value);
					this.SendPropertyChanging();
					this._Account_ID = value;
					this.SendPropertyChanged("Account_ID");
					this.OnAccount_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Decimal(10,0) NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountTable_Customer_Accounts_Table", Storage="_AccountTable", ThisKey="Account_ID", OtherKey="Account_ID", IsForeignKey=true)]
		public AccountTable AccountTable
		{
			get
			{
				return this._AccountTable.Entity;
			}
			set
			{
				AccountTable previousValue = this._AccountTable.Entity;
				if (((previousValue != value) 
							|| (this._AccountTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountTable.Entity = null;
						previousValue.Customer_Accounts_Tables.Remove(this);
					}
					this._AccountTable.Entity = value;
					if ((value != null))
					{
						value.Customer_Accounts_Tables.Add(this);
						this._Account_ID = value.Account_ID;
					}
					else
					{
						this._Account_ID = default(int);
					}
					this.SendPropertyChanged("AccountTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerTable_Customer_Accounts_Table", Storage="_CustomerTable", ThisKey="Customer_ID", OtherKey="Customer_ID", IsForeignKey=true)]
		public CustomerTable CustomerTable
		{
			get
			{
				return this._CustomerTable.Entity;
			}
			set
			{
				CustomerTable previousValue = this._CustomerTable.Entity;
				if (((previousValue != value) 
							|| (this._CustomerTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerTable.Entity = null;
						previousValue.Customer_Accounts_Tables.Remove(this);
					}
					this._CustomerTable.Entity = value;
					if ((value != null))
					{
						value.Customer_Accounts_Tables.Add(this);
						this._Customer_ID = value.Customer_ID;
					}
					else
					{
						this._Customer_ID = default(int);
					}
					this.SendPropertyChanged("CustomerTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerTable")]
	public partial class CustomerTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Customer_ID;
		
		private string _Customer_Name;
		
		private string _Customer_Email;
		
		private string _Customer_Password;
		
		private string _Customer_DOB;
		
		private string _Customer_Telephone;
		
		private string _Customer_Address;
		
		private EntitySet<Customer_Accounts_Table> _Customer_Accounts_Tables;
		
		private EntitySet<TransactionTable> _TransactionTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomer_IDChanging(int value);
    partial void OnCustomer_IDChanged();
    partial void OnCustomer_NameChanging(string value);
    partial void OnCustomer_NameChanged();
    partial void OnCustomer_EmailChanging(string value);
    partial void OnCustomer_EmailChanged();
    partial void OnCustomer_PasswordChanging(string value);
    partial void OnCustomer_PasswordChanged();
    partial void OnCustomer_DOBChanging(string value);
    partial void OnCustomer_DOBChanged();
    partial void OnCustomer_TelephoneChanging(string value);
    partial void OnCustomer_TelephoneChanged();
    partial void OnCustomer_AddressChanging(string value);
    partial void OnCustomer_AddressChanged();
    #endregion
		
		public CustomerTable()
		{
			this._Customer_Accounts_Tables = new EntitySet<Customer_Accounts_Table>(new Action<Customer_Accounts_Table>(this.attach_Customer_Accounts_Tables), new Action<Customer_Accounts_Table>(this.detach_Customer_Accounts_Tables));
			this._TransactionTables = new EntitySet<TransactionTable>(new Action<TransactionTable>(this.attach_TransactionTables), new Action<TransactionTable>(this.detach_TransactionTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Customer_ID
		{
			get
			{
				return this._Customer_ID;
			}
			set
			{
				if ((this._Customer_ID != value))
				{
					this.OnCustomer_IDChanging(value);
					this.SendPropertyChanging();
					this._Customer_ID = value;
					this.SendPropertyChanged("Customer_ID");
					this.OnCustomer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Name", DbType="VarChar(45)")]
		public string Customer_Name
		{
			get
			{
				return this._Customer_Name;
			}
			set
			{
				if ((this._Customer_Name != value))
				{
					this.OnCustomer_NameChanging(value);
					this.SendPropertyChanging();
					this._Customer_Name = value;
					this.SendPropertyChanged("Customer_Name");
					this.OnCustomer_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Email", DbType="VarChar(45)")]
		public string Customer_Email
		{
			get
			{
				return this._Customer_Email;
			}
			set
			{
				if ((this._Customer_Email != value))
				{
					this.OnCustomer_EmailChanging(value);
					this.SendPropertyChanging();
					this._Customer_Email = value;
					this.SendPropertyChanged("Customer_Email");
					this.OnCustomer_EmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Password", DbType="VarChar(45)")]
		public string Customer_Password
		{
			get
			{
				return this._Customer_Password;
			}
			set
			{
				if ((this._Customer_Password != value))
				{
					this.OnCustomer_PasswordChanging(value);
					this.SendPropertyChanging();
					this._Customer_Password = value;
					this.SendPropertyChanged("Customer_Password");
					this.OnCustomer_PasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_DOB", DbType="VarChar(15)")]
		public string Customer_DOB
		{
			get
			{
				return this._Customer_DOB;
			}
			set
			{
				if ((this._Customer_DOB != value))
				{
					this.OnCustomer_DOBChanging(value);
					this.SendPropertyChanging();
					this._Customer_DOB = value;
					this.SendPropertyChanged("Customer_DOB");
					this.OnCustomer_DOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Telephone", DbType="VarChar(20)")]
		public string Customer_Telephone
		{
			get
			{
				return this._Customer_Telephone;
			}
			set
			{
				if ((this._Customer_Telephone != value))
				{
					this.OnCustomer_TelephoneChanging(value);
					this.SendPropertyChanging();
					this._Customer_Telephone = value;
					this.SendPropertyChanged("Customer_Telephone");
					this.OnCustomer_TelephoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Address", DbType="VarChar(100)")]
		public string Customer_Address
		{
			get
			{
				return this._Customer_Address;
			}
			set
			{
				if ((this._Customer_Address != value))
				{
					this.OnCustomer_AddressChanging(value);
					this.SendPropertyChanging();
					this._Customer_Address = value;
					this.SendPropertyChanged("Customer_Address");
					this.OnCustomer_AddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerTable_Customer_Accounts_Table", Storage="_Customer_Accounts_Tables", ThisKey="Customer_ID", OtherKey="Customer_ID")]
		public EntitySet<Customer_Accounts_Table> Customer_Accounts_Tables
		{
			get
			{
				return this._Customer_Accounts_Tables;
			}
			set
			{
				this._Customer_Accounts_Tables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerTable_TransactionTable", Storage="_TransactionTables", ThisKey="Customer_ID", OtherKey="Customer_ID")]
		public EntitySet<TransactionTable> TransactionTables
		{
			get
			{
				return this._TransactionTables;
			}
			set
			{
				this._TransactionTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customer_Accounts_Tables(Customer_Accounts_Table entity)
		{
			this.SendPropertyChanging();
			entity.CustomerTable = this;
		}
		
		private void detach_Customer_Accounts_Tables(Customer_Accounts_Table entity)
		{
			this.SendPropertyChanging();
			entity.CustomerTable = null;
		}
		
		private void attach_TransactionTables(TransactionTable entity)
		{
			this.SendPropertyChanging();
			entity.CustomerTable = this;
		}
		
		private void detach_TransactionTables(TransactionTable entity)
		{
			this.SendPropertyChanging();
			entity.CustomerTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransactionTable")]
	public partial class TransactionTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Transaction_ID;
		
		private string _Transaction_Type;
		
		private string _Transaction_Date;
		
		private decimal _Amount;
		
		private System.Nullable<int> _Account_ID;
		
		private System.Nullable<int> _Customer_ID;
		
		private EntityRef<AccountTable> _AccountTable;
		
		private EntityRef<CustomerTable> _CustomerTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransaction_IDChanging(int value);
    partial void OnTransaction_IDChanged();
    partial void OnTransaction_TypeChanging(string value);
    partial void OnTransaction_TypeChanged();
    partial void OnTransaction_DateChanging(string value);
    partial void OnTransaction_DateChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnAccount_IDChanging(System.Nullable<int> value);
    partial void OnAccount_IDChanged();
    partial void OnCustomer_IDChanging(System.Nullable<int> value);
    partial void OnCustomer_IDChanged();
    #endregion
		
		public TransactionTable()
		{
			this._AccountTable = default(EntityRef<AccountTable>);
			this._CustomerTable = default(EntityRef<CustomerTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Transaction_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Transaction_ID
		{
			get
			{
				return this._Transaction_ID;
			}
			set
			{
				if ((this._Transaction_ID != value))
				{
					this.OnTransaction_IDChanging(value);
					this.SendPropertyChanging();
					this._Transaction_ID = value;
					this.SendPropertyChanged("Transaction_ID");
					this.OnTransaction_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Transaction_Type", DbType="VarChar(15)")]
		public string Transaction_Type
		{
			get
			{
				return this._Transaction_Type;
			}
			set
			{
				if ((this._Transaction_Type != value))
				{
					this.OnTransaction_TypeChanging(value);
					this.SendPropertyChanging();
					this._Transaction_Type = value;
					this.SendPropertyChanged("Transaction_Type");
					this.OnTransaction_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Transaction_Date", DbType="VarChar(20)")]
		public string Transaction_Date
		{
			get
			{
				return this._Transaction_Date;
			}
			set
			{
				if ((this._Transaction_Date != value))
				{
					this.OnTransaction_DateChanging(value);
					this.SendPropertyChanging();
					this._Transaction_Date = value;
					this.SendPropertyChanged("Transaction_Date");
					this.OnTransaction_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(10,0) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_ID", DbType="Int")]
		public System.Nullable<int> Account_ID
		{
			get
			{
				return this._Account_ID;
			}
			set
			{
				if ((this._Account_ID != value))
				{
					if (this._AccountTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccount_IDChanging(value);
					this.SendPropertyChanging();
					this._Account_ID = value;
					this.SendPropertyChanged("Account_ID");
					this.OnAccount_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_ID", DbType="Int")]
		public System.Nullable<int> Customer_ID
		{
			get
			{
				return this._Customer_ID;
			}
			set
			{
				if ((this._Customer_ID != value))
				{
					if (this._CustomerTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomer_IDChanging(value);
					this.SendPropertyChanging();
					this._Customer_ID = value;
					this.SendPropertyChanged("Customer_ID");
					this.OnCustomer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountTable_TransactionTable", Storage="_AccountTable", ThisKey="Account_ID", OtherKey="Account_ID", IsForeignKey=true)]
		public AccountTable AccountTable
		{
			get
			{
				return this._AccountTable.Entity;
			}
			set
			{
				AccountTable previousValue = this._AccountTable.Entity;
				if (((previousValue != value) 
							|| (this._AccountTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountTable.Entity = null;
						previousValue.TransactionTables.Remove(this);
					}
					this._AccountTable.Entity = value;
					if ((value != null))
					{
						value.TransactionTables.Add(this);
						this._Account_ID = value.Account_ID;
					}
					else
					{
						this._Account_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("AccountTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerTable_TransactionTable", Storage="_CustomerTable", ThisKey="Customer_ID", OtherKey="Customer_ID", IsForeignKey=true)]
		public CustomerTable CustomerTable
		{
			get
			{
				return this._CustomerTable.Entity;
			}
			set
			{
				CustomerTable previousValue = this._CustomerTable.Entity;
				if (((previousValue != value) 
							|| (this._CustomerTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerTable.Entity = null;
						previousValue.TransactionTables.Remove(this);
					}
					this._CustomerTable.Entity = value;
					if ((value != null))
					{
						value.TransactionTables.Add(this);
						this._Customer_ID = value.Customer_ID;
					}
					else
					{
						this._Customer_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CustomerTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
